import logging
import asyncio
import aiohttp
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from config import API_HOST, API_TIMEOUT
from states import UserStates
from utils import safe_send_message, safe_delete_message, markdown_to_html


bot = None

def register_bot(bot_instance):
    global bot
    bot = bot_instance

    asyncio.create_task(setup_bot_commands(bot))

async def setup_bot_commands(bot_instance):
    commands = [
        BotCommand(command="start", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="restart", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    ]
    await bot_instance.set_my_commands(commands)


async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer(
        "üåô <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DinarAI!</b> üåô\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–ª–∞–º—Å–∫–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤:\n"
        "‚Ä¢ üè¶ –ò—Å–ª–∞–º—Å–∫–æ–º –±–∞–Ω–∫–∏–Ω–≥–µ\n"
        "‚Ä¢ üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —à–∞—Ä–∏–∞—Ç—É\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç!.\n\n"
        "<i>–í–∞—à –ø—É—Ç—å –∫ —ç—Ç–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!</i>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(UserStates.waiting_for_question)


async def cmd_help(message: types.Message):
    await message.answer(
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    )


async def cmd_restart(message: types.Message, state: FSMContext):
    await state.clear()
    
    await message.answer(
        "–î–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."
    )
    
    await state.set_state(UserStates.waiting_for_question)


async def process_question(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    question = message.text
    processing_message = None
    
    try:
        processing_message = await safe_send_message(message, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    except Exception as e:
        logging.error(f"Failed to send processing message: {e}")
        return
    
    try:
        payload = {
            "chat_id": chat_id,
            "question": question
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_HOST}/chat", 
                json=payload, 
                timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    answer = markdown_to_html(data.get("answer", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."))
                    sources = data.get("urls", [])
                    logging.info(f"Sources (raw): {sources}")
                    logging.info(f"Sources type: {type(sources)}")

                    response_text = f"{answer}\n\n"

                    if sources:
                        response_text += "üìö <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
                        for i, source in enumerate(sources, 1):
                            response_text += f"{i}. {markdown_to_html(source)}\n"

                    if processing_message:
                        await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)

                    await safe_send_message(message, response_text, parse_mode=ParseMode.HTML)
                else:
                    if processing_message:
                        await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)

                    await safe_send_message(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except asyncio.TimeoutError:
        logging.error("API request timed out")
        if processing_message:
            await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)
        await safe_send_message(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error processing question: {e}")
        if processing_message:
            await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)
        await safe_send_message(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def echo(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.")


def register_handlers(dp):
    dp.message.register(cmd_start, Command('start'))
    dp.message.register(cmd_help, Command('help'))
    dp.message.register(cmd_restart, Command('restart'))
    dp.message.register(process_question, UserStates.waiting_for_question)
    dp.message.register(echo)