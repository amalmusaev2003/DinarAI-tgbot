import logging
import asyncio
import aiohttp
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import API_HOST, API_TIMEOUT
from states import UserStates
from utils import safe_send_message, safe_delete_message, markdown_to_html

# Store bot instance to be set from main.py
bot = None

def register_bot(bot_instance):
    """Register the bot instance for use in handlers."""
    global bot
    bot = bot_instance

# Command handlers
async def cmd_start(message: types.Message, state: FSMContext):
    """Handle /start command: reset state and send welcome message."""
    await state.clear()
    
    await message.answer(
        "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! üëã\n\n"
        "–Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏—Å–ª–∞–º—Å–∫–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )
    await state.set_state(UserStates.waiting_for_question)


async def cmd_help(message: types.Message):
    """Handle /help command: show available commands and instructions."""
    await message.answer(
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


async def process_question(message: types.Message, state: FSMContext):
    """Process user questions by sending them to the API and formatting responses."""
    chat_id = message.chat.id
    question = message.text
    processing_message = None
    
    try:
        # Send "processing" message
        processing_message = await safe_send_message(message, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    except Exception as e:
        logging.error(f"Failed to send processing message: {e}")
        return
    
    try:
        # Prepare API request
        payload = {
            "chat_id": chat_id,
            "question": question
        }
        
        # Send request to API
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_HOST}/chat", 
                json=payload, 
                timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
            ) as response:
                if response.status == 200:
                    # Process successful response
                    data = await response.json()
                    # Convert markdown to HTML
                    answer = markdown_to_html(data.get("answer", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."))
                    sources = data.get("sources", [])
                    
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    response_text = f"{answer}\n\n"
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if sources:
                        response_text += "üìö <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
                        for i, source in enumerate(sources, 1):
                            response_text += f"{i}. {markdown_to_html(source)}\n"
                    
                    # Safely delete processing message
                    if processing_message:
                        await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)
                    
                    # Safely send the answer with retry logic
                    await safe_send_message(message, response_text, parse_mode=ParseMode.HTML)
                else:
                    # Safely delete processing message
                    if processing_message:
                        await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)
                    
                    await safe_send_message(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except asyncio.TimeoutError:
        logging.error("API request timed out")
        if processing_message:
            await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)
        await safe_send_message(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error processing question: {e}")
        if processing_message:
            await safe_delete_message(bot, processing_message.chat.id, processing_message.message_id)
        await safe_send_message(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def echo(message: types.Message):
    """Handle any other messages."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.")


def register_handlers(dp):
    """Register all handlers with the dispatcher."""
    dp.message.register(cmd_start, Command('start'))
    dp.message.register(cmd_help, Command('help'))
    dp.message.register(process_question, UserStates.waiting_for_question)
    dp.message.register(echo)